name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup JDK 21
      uses: actions/setup-java@v4.2.1
      with:
        java-version: 21

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build test
      env:
          GIT_USER: ${{ secrets.GIT_USER }}
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
    - name: Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()    # run this step even if previous step failed
      with:
        name: Junit Tests            # Name of the check run which will be created
        path: build/test-results/TEST-*.xml    # Path to test results
        reporter: java-junit        # Format of test results
#    - name: SonarQube Quality Gate check
#      uses: sonarsource/sonarqube-quality-gate-action@master
#      with:
#        scanMetadataReportFile: build/sonar/report-task.txt
#      # Force to fail step after specific time
#      timeout-minutes: 5
#      env:
#        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#    environment: production
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Setup JDK 21
#        uses: actions/setup-java@v4.2.1
#        with:
#          java-version: 21
#
#      - name: Cache Gradle packages
#        uses: actions/cache@v4
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#
#      - name: Build with Gradle
#        run: ./gradlew bootJar
#        env:
#          GIT_USER: ${{ secrets.GIT_USER }}
#          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
#
#      - name: Configure AWS Credentials for China region audience
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          audience: sts.amazonaws.com.cn
#          aws-region: us-east-3
#          role-to-assume: ${{ secrets.GIT_AWS_ROLE }}
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v2
#
#      - name: Build, tag, and push docker image to Amazon ECR
#        env:
#          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          REPOSITORY: ${{ secrets.ECR_REPO_NAME }}
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
#          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
#          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: task-definition.json
#          container-name: prod-transformers-api-td
#          image: ${{ steps.build-image.outputs.image }}
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: prod-transformers-api-service
#          cluster: prod-transformers-api-ecs-cluster
#          wait-for-service-stability: true
